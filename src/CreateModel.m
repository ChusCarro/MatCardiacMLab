%=======================================================================
%
% CreateModel: Function to create a model for the simulator based on
%              the MatLab file created by COR with the CellML file.
%
%-----------------------------------------------------------------------
%
%    model = CreateModel(modelfile_input,modelfile_output,model_name)
%
%    Input: 
%      modelfile_input: String with the name of the file generated by 
%                  COR
%      model_output: String with the name of the file where the *.m 
%                  file of the model is saved
%      model_name: String with the name of the model to save in a 
%                  database
% 
%    Output:
%      model: Model structure for the simulator
%
%-----------------------------------------------------------------------
%
%   See also:
%      CreateModelStructure, ShowModels, CreateDefaultModelStructure
%
%=======================================================================
%                  
%                                               Jesus Carro Fernandez
%                                               Universidad San Jorge
%                                                       jcarro@usj.es
%                                                          2013/07/26
%
%=======================================================================


function model = CreateModel(modelfile_input,modelfile_output,model_name)

if(strcmp(modelfile_input(end-1:end),'.m'))
    modelfile_input = modelfile_input(1:end-2);
end
model_extension = '.m';

file = fopen([modelfile_input model_extension]);
A=char(fread(file)');
fclose(file);

ind=findstr(A,'Reasign(Constants, Values)');

if(isempty(ind))
    B=['%-------------------------------------------------------------------------------' ...
        char([13 10]) '% Computed variables' ...
        char([13 10]) '%-------------------------------------------------------------------------------'];

    ind = findstr(A,B);

    A=[A(1:ind-1) 'Reasign(Constants, Values)' char([13 10 13 10]) A(ind:end)];
end

if(strcmp(modelfile_output(end-1:end),'.m'))
    modelfile_output = modelfile_output(1:end-2);
end

function_name = modelfile_output;

name_position = find(function_name=='/',1,'last');
if(~isempty(name_position))
    function_name = function_name(name_position+1:end);
end

old_function_name = modelfile_input;

old_name_position = find(old_function_name=='/',1,'last');
if(~isempty(old_name_position))
    old_function_name = old_function_name(old_name_position+1:end);
end

ind1=findstr('function',A); 
ind1=ind1(1);
ind2=findstr(old_function_name,A(ind1:end));
ind2=ind2(1)+ind1-1;
ind3=findstr('(',A(ind2:end));
ind3=ind3(1)+ind2-1;
ind4=findstr(',',A(ind3:end));
ind4=ind4(1)+ind3-1;
ind5=findstr(')',A(ind4:end));
ind5=ind5(1)+ind4-1;
time_str = A(ind3+1:ind4-1);

A=[A(1:ind1-1) 'function [dY, CompVar] = ' function_name '(' time_str ', Y, Constants, Values)' A(ind5+1:end)]; 

ind=findstr('% Y = [',A);
ind2 = findstr('];',A(ind:end));
eval(['SV0 = ' A(ind+6:ind+ind2-1) ';'])

ind=findstr('% YNames = {',A);
ind2 = findstr('};',A(ind:end));
eval(['SVNames' A(ind+8:ind+ind2-1) ';'])

ind=findstr('% YUnits = {',A);
ind2 = findstr('};',A(ind:end));
eval(['SVUnits' A(ind+8:ind+ind2-1) ';'])

B=['%-------------------------------------------------------------------------------' ...
    char([13 10]) '% Constants' ...
    char([13 10]) '%-------------------------------------------------------------------------------'];

ind = findstr(A,B);

C=A(ind+length(B):end);

ind = findstr('Reasign(Constants, Values)',C);

C=C(1:ind-1);

C=sscanf(C,'%s');

equals = find(C=='=');
comas = find(C==';');
leftbracket = [0 find(C==')')];
rightbracket = find(C=='(');

CNames = cell(size(equals));
CUnits = cell(size(equals));
C0 = zeros(size(equals));

for i=1:length(equals);
    CNames{i} = C(leftbracket(i)+1:equals(i)-1);
    C0(i) = str2double(C(equals(i)+1:comas(i)-1));
    CUnits{i} = C(comas(i)+2:rightbracket(i)-1);
end

D = ['%-------------------------------------------------------------------------------' ...
    char([13 10]) '% Computed variables' ...
    char([13 10]) '%-------------------------------------------------------------------------------'];

E = ['%-------------------------------------------------------------------------------' ...
    char([13 10]) '% Computation' ...
    char([13 10]) '%-------------------------------------------------------------------------------'];

ind = findstr(A,D);
F = A(ind+length(D):end);
ind = findstr(E,F);
F = F(1:ind-1);
F = sscanf(F,'%s');

perc = find(F=='%');
leftbracket = find(F=='(');
rightbracket = find(F==')');

CVNames = cell(size(perc));
CVUnits = cell(size(perc));

for i=1:length(perc);
    CVNames{i} = F(perc(i)+1:leftbracket(2*i-1)-1);
    CVUnits{i} = F(leftbracket(2*i-1)+1:rightbracket(2*i-1)-1);
end

G=[char([13 10]) '%===============================================================================' ...
    char([13 10]) '% End of file' ...
    char([13 10]) '%==============================================================================='];

ind1 = findstr(A,G);

ind2 = findstr(A,[char([13 10 13 10]) 'CompVar = [']);

if(isempty(ind2))
  ind2 = ind1-2;
end

A_final = [A(1:ind2-1) char([13 10 13 10]) 'CompVar = ['];
for i=1:length(CVNames)
    A_final = [A_final CVNames{i} ' '];
end

A_final = [A_final '];' A(ind1-2:end)];

file2=fopen([modelfile_output model_extension],'w+');
fwrite(file2,A_final);
fclose(file2);

model = CreateModelStructure(model_name,SV0,str2func(function_name),SVNames,SVUnits,CNames,C0,CUnits,CVNames,CVUnits);
